services:
  database:
    image: postgres:16-alpine
    container_name: kupipodariday_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - kupipodariday
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kupipodariday_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      # JWT config used by JwtConfigFactory and JwtStrategy
      JWT_SECRET: ${JWT_SECRET}
      JWT_TOKEN_TIME_LIMIT: ${JWT_TOKEN_TIME_LIMIT}
      # Database config used by DatabaseConfigFactory
      DATABASE_HOST: database
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SYNCHRONIZE: ${DATABASE_SYNCHRONIZE}
      DATABASE_AUTOLOAD_ENTITIES: ${DATABASE_AUTOLOAD_ENTITIES}
    depends_on:
      - database
    ports:
      - "4000:4000"
    networks:
      - kupipodariday

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kupipodariday_frontend
    restart: unless-stopped
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - kupipodariday

volumes:
  db_data:

networks:
  kupipodariday:
    driver: bridge